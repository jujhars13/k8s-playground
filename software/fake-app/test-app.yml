apiVersion: v1
kind: Namespace
metadata:
  name: test-app-one

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ing
  namespace: test-app-one
  annotations:
    # nginx.ingress.kubernetes.io/rewrite-target: /$1
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/limit-rpm: "30"
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/modsecurity-transaction-id: "$request_id"
  labels:
    app: app
spec:
  ingressClassName: nginx
  rules:
    - host: test-app-one.localtest.me
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: app
                port:
                  number: 80

---

apiVersion: v1
kind: Service
metadata:
  name: app
  namespace: test-app-one
  labels:
    app: app
spec:
  type: NodePort
  ports:
  - port: 80
    name: "http"
    targetPort: 80
  selector:
    app: app

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  namespace: test-app-one
  labels:
    app: app

spec:
  selector:
    matchLabels:
      app: app
  replicas: 3
  minReadySeconds: 5
  strategy:
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 4
      maxUnavailable: 1

  # only keep last n revisions in history
  revisionHistoryLimit: 4

  template:

    metadata:
      labels:
        app: app

    spec:
      restartPolicy: Always

      containers:
        - name: fake-app
          image: nginx
          imagePullPolicy: Always
          ports:
            - containerPort: 80
              name: "node-http"
              protocol: TCP
            initialDelaySeconds: 5
            periodSeconds: 35
